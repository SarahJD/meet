{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","api.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","handleShowDetails","state","showDetails","setState","event","this","props","className","summary","start","dateTime","timeZone","location","onClick","href","htmlLink","end","description","organizer","email","Component","EventList","events","map","id","CitySearch","handleInputChange","value","target","showSuggestions","suggestions","locations","filter","toUpperCase","indexOf","query","handleItemClicked","suggestion","updateEvents","type","onChange","onFocus","placeholder","style","display","NumberOfEvents","handleInputNumberChange","numberInput","extractLocations","Set","checkToken","accessToken","a","fetch","then","res","json","catch","error","result","getEvents","NProgress","getAccessToken","token","removeQuery","url","axios","defaults","headers","get","data","localStorage","setItem","JSON","stringify","done","getItem","tokenCheck","removeItem","searchParams","URLSearchParams","window","search","code","results","authUrl","getToken","history","pushState","pathname","newurl","protocol","host","encodeCode","encodeURIComponent","access_token","App","locationEvents","mounted","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.eb84ad96.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Event extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      showDetails: false\n    }\n  }\n\n  handleShowDetails = () => {\n    if(this.state.showDetails === false) {\n      this.setState({ showDetails: true });\n    } else { \n      this.setState({ showDetails: false });\n    }\n  };\n\n  render() {\n    const { event } = this.props;\n    const showDetails = this.state.showDetails;\n\n\n    return (\n      <div className=\"Event\">\n        <section className=\"overview\">\n          <h2 className=\"summary\">{event.summary}</h2>\n          {/* {<div className=\"start-time\">event.start.map((info) => (\n            <p key={info}>{info}</p>))} */}\n          <p className=\"start-time\">{event.start.dateTime}</p>\n          <p className=\"time-zone\">(time zone: {event.start.timeZone})</p>\n          <p className=\"location\">{event.location}</p>\n        {!showDetails && (\n          <button className=\"btn-details\" onClick={this.handleShowDetails}>show details</button>\n        )}\n        </section>\n\n        {showDetails && (\n        <section className=\"details\"> \n          <h3 className=\"about-header\">About event:</h3>\n          <a className=\"htmlLink\" href=\"{event.htmlLink}\">{event.htmlLink}</a>\n          <p className=\"end-time\">{event.end.dateTime}</p>\n          <p className=\"description\">{event.description}</p>\n          <p className=\"organizer-email\">{event.organizer.email}</p>      \n          <button className=\"btn-hide-details\" onClick={this.handleShowDetails}>hide details</button>\n        </section>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Event;","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n  render() {\n    const { events } = this.props;\n    return (\n      <ul className=\"EventList\">\n        {events.map(event =>\n        <li key={event.id}>\n          <Event event={event} />\n        </li>)}\n      </ul>\n    );\n  }\n}\n\nexport default EventList;","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n    query: '',\n    suggestions: [], \n    showSuggestions: false,\n    }\n  }\n\n  handleInputChange = (event) => {\n    const value = event.target.value;\n    this.setState({showSuggestions: true});\n    const suggestions = this.props.locations.filter((location) => {\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n    });\n    this.setState({ \n      query: value,\n      suggestions, \n  });\n  }\n\n  handleItemClicked = (suggestion) => {\n    this.setState({\n      query: suggestion, \n      suggestions: [],\n      showSuggestions: false\n    });\n\n    this.props.updateEvents(suggestion);\n  }\n\n  render() {\n    return (\n      <div className=\"CitySearch\">\n        <input\n          type=\"text\"\n          className=\"city\"\n          value={this.state.query}\n          onChange={this.handleInputChange}\n          onFocus={() => {\n            this.setState({ showSuggestions: true });\n          }}\n          placeholder=\"Search for a City\"\n        />\n        <ul \n          className=\"suggestions\"\n          style={this.state.showSuggestions ? {} : { display: \"none\" }}\n          >\n          {this.state.suggestions.map((suggestion) => (\n            <li \n            key={suggestion}\n            onClick={() => this.handleItemClicked(suggestion)}\n            >\n              {suggestion}\n            </li>\n          ))}\n            <li \n            key='all'\n            onClick={() => this.handleItemClicked(\"all\")}\n            >\n              <b>See all cities</b>\n            </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n    numberInput: '32'\n    }\n  }\n\n  handleInputNumberChange = (event) => {\n    const value = event.target.value;\n    this.setState ({\n      numberInput: value\n    });\n  }\n\n  render() {\n    return(\n      <div className=\"NumberofEvents\">\n        <label className=\"label-number\">Number of Events: </label>\n        <input\n          type=\"text\"\n          className=\"number\"\n          value={this.state.numberInput}\n          onChange={this.handleInputNumberChange}\n        />\n      </div>\n    )\n  }\n}\n\nexport default NumberOfEvents;","import { mockData } from './mock-data';\nimport axios from 'axios';\nimport NProgress from 'nprogress';\n\nexport const extractLocations = (events) => {\n  var extractLocations = events.map((event) => event.location);\n  var locations = [...new Set(extractLocations)];\n  return locations;\n};\n\nconst checkToken = async (accessToken) => {\n  const result = await fetch(\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n  )\n    .then((res) => res.json())\n    .catch((error) => error.json());\n  \n  return result;\n};\n\nexport const getEvents = async () => {\n  NProgress.start();\n\n  // if(window.location.href.startsWith('http://localhost')) {\n  //   return mockData;\n  // }\n\n  const token = await getAccessToken();\n\n  if(token) {\n    removeQuery();\n    const url = 'https://1ho8gdafy6.execute-api.eu-central-1.amazonaws.com/dev/api/get-events' + '/' + token;\n    axios.defaults.headers.get['Access-Control-Allow-Origin'] = '*';\n    const result = await axios.get(url);\n    if (result.data) {\n      var locations = extractLocations(result.data.events);\n      localStorage.setItem('lastEvents', JSON.stringify(result.data));\n      localStorage.setItem('locations', JSON.stringify(locations));\n    }\n    NProgress.done();\n    return result.data.events;\n  }\n};\n\nexport const getAccessToken = async() => {\n  const accessToken = localStorage.getItem('access_token');\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem('access_token');\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get('code');\n    if (!code) {\n      const results = await axios.get(\n        'https://1ho8gdafy6.execute-api.eu-central-1.amazonaws.com/dev/api/get-auth-url'\n      );\n      const { authUrl } = results.data;\n      return (window.location.href = authUrl);\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n}\n\nconst removeQuery = () => {\n  if(window.history.pushState && window.location.pathname) {\n    var newurl = \n      window.location.protocol +\n      '//' +\n      window.location.host + \n      window.location.pathname;\n    window.history.pushState('', '', newurl);\n  } else {\n    newurl = window.location.protocol + '//' + window.location.host;\n    window.history.pushState('', '', newurl);\n  }\n};\n\nconst getToken = async (code) => {\n  const encodeCode = encodeURIComponent(code);\n  const { access_token } = await fetch(\n    'https://1ho8gdafy6.execute-api.eu-central-1.amazonaws.com/dev/api/token' + '/' + encodeCode\n  )\n    .then((res) => {\n      return res.json();\n    })\n    .catch((error) => error);\n\n  access_token && localStorage.setItem('access_token', access_token);\n\n  return access_token;\n};","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport { getEvents, extractLocations } from './api';\n\n\nclass App extends Component {\n  state = {\n    events: [],\n    locations: []\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    getEvents().then((events) => {\n      if (this.mounted) {\n        this.setState({ events, locations: extractLocations(events) });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  updateEvents = (location) => {\n    getEvents().then((events) => {\n      const locationEvents = (location === 'all') ?\n        events :\n        events.filter((event) => event.location === location);\n      this.setState({\n        events: locationEvents\n      });\n    });\n  }\n\n  render() { \n    return (\n      <div className=\"App\">\n        <CitySearch locations={this.state.locations} updateEvents={this.updateEvents} />\n        <NumberOfEvents />\n        <EventList events={this.state.events}/>\n      </div>\n    );\n  }\n}\n\n\n// FOR APP VERIFICATION (4.2)\n// import Login from './Login';\n// import { getEvents, checkToken } from \"./api\";\n\n// function App() {\n\n//   state = {tokenCheck: false};\n\n//   async componentDidMount() {\n//     const accessToken =\n//     localStorage.getItem(\"access_token\");\n//     const validToken = accessToken !== null ? await\n//     checkToken(accessToken) : false;\n//     this.setState({ tokenCheck: validToken });\n//     if(validToken === true) this.updateEvents()\n//     const searchParams = new\n//     URLSearchParams(window.location.search);\n//     const code = searchParams.get(\"code\");\n//     this.mounted = true;\n//     if (code && this.mounted === true && validToken\n//     === false){\n//     this.setState({tokenCheck:true });\n//     this.updateEvents()\n//     }\n//     }\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Hallo ihr lieben Schückebeers!\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}