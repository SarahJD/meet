{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","handleShowDetails","state","showDetails","setState","className","onClick","this","href","Component","EventList","events","props","map","event","id","CitySearch","handleInputChange","value","target","suggestions","locations","filter","location","toUpperCase","indexOf","query","handleItemClicked","suggestion","type","onChange","NumberOfEvents","handleInputNumberChange","numberInput","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc2971e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Event extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      showDetails: false\n    }\n  }\n\n  handleShowDetails = () => {\n    if(this.state.showDetails === false) {\n      this.setState({ showDetails: true });\n    } else { \n      this.setState({ showDetails: false });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"Event\">\n        <div className=\"summary\"></div>\n        <div className=\"start\"></div>\n        <div className=\"atsummary\"></div>\n        <div className=\"location\"></div>\n        <button className=\"btn-details\" onClick={this.handleShowDetails}></button>\n        <div className=\"details\"> \n          <div className=\"about-header\"></div>\n          <a href=\"#\" className=\"calendar-link\" />\n          <div className=\"description\"></div>\n          <button className=\"btn-hide-details\" onClick={this.handleShowDetails}></button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Event;","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n  render() {\n    const { events } = this.props;\n    return (\n      <ul className=\"EventList\">\n        {events.map(event =>\n        <li key={event.id}>\n          <Event event={event} />\n        </li>)}\n      </ul>\n    );\n  }\n}\n\nexport default EventList;","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n    query: '',\n    suggestions: []\n    }\n  }\n\n  handleInputChange = (event) => {\n    const value = event.target.value;\n    const suggestions = this.props.locations.filter((location) => {\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n    });\n    this.setState({ \n      query: value,\n      suggestions, \n  });\n  }\n\n  handleItemClicked = (suggestion) => {\n    this.setState({\n      query: suggestion\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"CitySearch\">\n        <input\n          type=\"text\"\n          className=\"city\"\n          value={this.state.query}\n          onChange={this.handleInputChange}\n        />\n        <ul className=\"suggestions\">\n          {this.state.suggestions.map((suggestion) => (\n            <li \n            key={suggestion}\n            onClick={() => this.handleItemClicked(suggestion)}\n            >\n              {suggestion}\n            </li>\n          ))}\n            <li key='all'>\n              <b>See all cities</b>\n            </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n    numberInput: '32'\n    }\n  }\n\n  handleInputNumberChange = (event) => {\n    const value = event.target.value;\n    this.setState ({\n      numberInput: value\n    });\n  }\n\n  render() {\n    return(\n      <div className=\"NumberofEvents\">\n        <label className=\"label-number\">Number of Events: </label>\n        <input\n          type=\"text\"\n          className=\"number\"\n          value={this.state.numberInput}\n          onChange={this.handleInputNumberChange}\n        />\n      </div>\n    )\n  }\n}\n\nexport default NumberOfEvents;","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <EventList />\n        <CitySearch />\n        <NumberOfEvents />\n      </div>\n    );\n  }\n}\n\n\n// FOR APP VERIFICATION (4.2)\n// import Login from './Login';\n// import { getEvents, checkToken } from \"./api\";\n\n// function App() {\n\n//   state = {tokenCheck: false};\n\n//   async componentDidMount() {\n//     const accessToken =\n//     localStorage.getItem(\"access_token\");\n//     const validToken = accessToken !== null ? await\n//     checkToken(accessToken) : false;\n//     this.setState({ tokenCheck: validToken });\n//     if(validToken === true) this.updateEvents()\n//     const searchParams = new\n//     URLSearchParams(window.location.search);\n//     const code = searchParams.get(\"code\");\n//     this.mounted = true;\n//     if (code && this.mounted === true && validToken\n//     === false){\n//     this.setState({tokenCheck:true });\n//     this.updateEvents()\n//     }\n//     }\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Hallo ihr lieben Sch√ºckebeers!\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}